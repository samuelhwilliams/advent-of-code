from part1 import yield_all_possible_parts_with_boundaries, make_grid, yield_valid_parts, sum_engine_parts
from part2 import sum_gear_ratios

data = """
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
"""


def test_part1_make_grid():
    assert make_grid(data) == (
        ("4", "6", "7", ".", ".", "1", "1", "4", ".", "."),
        (".", ".", ".", "*", ".", ".", ".", ".", ".", "."),
        (".", ".", "3", "5", ".", ".", "6", "3", "3", "."),
        (".", ".", ".", ".", ".", ".", "#", ".", ".", "."),
        ("6", "1", "7", "*", ".", ".", ".", ".", ".", "."),
        (".", ".", ".", ".", ".", "+", ".", "5", "8", "."),
        (".", ".", "5", "9", "2", ".", ".", ".", ".", "."),
        (".", ".", ".", ".", ".", ".", "7", "5", "5", "."),
        (".", ".", ".", "$", ".", "*", ".", ".", ".", "."),
        (".", "6", "6", "4", ".", "5", "9", "8", ".", "."),
    )


def test_part1_yield_all_possible_parts_with_boundaries():
    assert list(yield_all_possible_parts_with_boundaries(make_grid(data))) == [
        (467, (0, 0), (0, 3)),
        (114, (0, 5), (0, 8)),
        (35, (2, 2), (2, 4)),
        (633, (2, 6), (2, 9)),
        (617, (4, 0), (4, 3)),
        (58, (5, 7), (5, 9)),
        (592, (6, 2), (6, 5)),
        (755, (7, 6), (7, 9)),
        (664, (9, 1), (9, 4)),
        (598, (9, 5), (9, 8)),
    ]


def test_part1_yield_valid_parts():
    grid = (
        ("1", "2", "3"),
        (".", ".", "*"),
        ("8", ".", "!"),
        (".", ".", "7"),
    )
    assert list(
        yield_valid_parts(
            grid,
            (
                (123, (0, 0), (0, 3)),
                (7, (3, 2), (3, 3)),
            ),
        )
    ) == [123, 7]


def test_part1_e2e():
    assert sum_engine_parts(data) == 4361


def test_part2():
    assert sum_gear_ratios(data) == (467 * 35 + 755 * 598)
